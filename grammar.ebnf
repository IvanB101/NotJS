program = { statement } ;
statement = block | variable_declaration | expression_statement | if_statement | while_statement | for_statement | return_statement ;
block = "{" , { statement } , "}" ;
variable_declaration = ( "let" | "const" ) , identifier , [ "=" , expression ] , ";" ;
expression_statement = expression , ";" ;
if_statement = "if" , "(" , expression , ")" , statement , [ "else" , statement ] ;
while_statement = "while" , "(" , expression , ")" , statement ;
for_statement = "for" , "(" , [ variable_declaration | expression_statement ] , ";" , [ expression ] , ";" , [ expression ] , ")" , statement ;
return_statement = "return" , [ expression ] , ";" ;
expression = assignment_expression ;
assignment_expression = conditional_expression , [ assignment_operator , assignment_expression ] ;
conditional_expression = logical_or_expression , [ "?" , expression , ":" , conditional_expression ] ;
logical_or_expression = logical_and_expression , { "|" , logical_and_expression } ;
logical_and_expression = equality_expression , { "&" , equality_expression } ;
equality_expression = relational_expression , { ( "==" | "!=" ) , relational_expression } ;
relational_expression = additive_expression , { ( "<" | "<=" | ">" | ">=" ) , additive_expression } ;
additive_expression = multiplicative_expression , { ( "+" | "-" ) , multiplicative_expression } ;
multiplicative_expression = unary_expression , { ( "*" | "/" ) , unary_expression } ;
unary_expression = postfix_expression | ( (  "-" | "!" ) , unary_expression ) ;
postfix_expression = primary_expression , { "[" , expression , "]" | "." , identifier | "(" , [ argument_list ] , ")" } ;
primary_expression = identifier | literal | "(" , expression , ")" ;
argument_list = expression , { "," , expression } ;
assignment_operator = "=" | "+=" | "-=" | "*=" | "/=" ;
identifier = letter , { letter | digit | "_" } ;
literal = decimal_literal | string_literal | boolean_literal | null_literal ;
decimal_literal = digit , { digit } , [ "." , { digit } ] , [ ( "e" | "E" ) , [ "+" | "-" ] , digit , { digit } ] ;
string_literal = '"' , { character } , '"' | "'" , { character } , "'" ;
boolean_literal = "true" | "false" ;
null_literal = "null" ;
letter = ( "a" | "b" | ... | "z" | "A" | "B" | ... | "Z" ) ;
digit = "0" | "1" | ... | "9" ;
character = ( letter | digit | "_" | " " | "!" | ... | "/" | ":" | "{" | ... | "}" ) ;